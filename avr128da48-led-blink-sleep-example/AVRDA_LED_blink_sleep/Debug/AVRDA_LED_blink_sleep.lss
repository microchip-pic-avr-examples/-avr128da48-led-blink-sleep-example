
AVRDA_LED_blink_sleep.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000377b  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d45  00000000  00000000  000039eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037a  00000000  00000000  00006730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00006aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000189c  00000000  00000000  00006b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  0000839c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000083d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
   8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
   c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  10:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  14:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  18:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_7>
  20:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  24:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  28:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  2c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  30:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  34:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  38:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  3c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  40:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  44:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  48:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  4c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  50:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  54:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  58:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  5c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  60:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  68:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  6c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  70:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  74:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  7c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  80:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  84:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  88:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  8c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  90:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  94:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  98:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  9c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  a0:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  a4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  a8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  ac:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  b0:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  b4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  b8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  bc:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  c0:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  c4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  c8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  cc:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  d0:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  d4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  d8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  dc:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  e0:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  e4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  e8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df e7       	ldi	r29, 0x7F	; 127
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  fc:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

00000100 <__bad_interrupt>:
 100:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000104 <__vector_7>:

#define TIMER_PERIOD        0x2000

void Timer_Init(void);

ISR(TCA0_OVF_vect) {
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24

    TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7e0a0b>
}
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <Timer_Init>:
    }
}

void Timer_Init(void)
{
    TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;
 122:	e0 e0       	ldi	r30, 0x00	; 0
 124:	fa e0       	ldi	r31, 0x0A	; 10
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	82 87       	std	Z+10, r24	; 0x0a
    TCA0.SINGLE.PER = TIMER_PERIOD;
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e2       	ldi	r25, 0x20	; 32
 12e:	86 a3       	std	Z+38, r24	; 0x26
 130:	97 a3       	std	Z+39, r25	; 0x27
    TCA0.SINGLE.CTRLA = (TCA_SINGLE_CLKSEL1_bm | TCA_SINGLE_CLKSEL2_bm);
 132:	8c e0       	ldi	r24, 0x0C	; 12
 134:	80 83       	st	Z, r24
    TCA0.SINGLE.CTRLA |= TCA_SINGLE_RUNSTDBY_bm;
 136:	80 81       	ld	r24, Z
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	80 83       	st	Z, r24
    TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <main>:
}

int main(void)
{
    /* Configure LED0 pin as output */
    PORTC.DIRSET = PIN6_bm;
 144:	80 e4       	ldi	r24, 0x40	; 64
 146:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
    Timer_Init();
 14a:	0e 94 91 00 	call	0x122	; 0x122 <Timer_Init>
    sei();
 14e:	78 94       	sei

    SLPCTRL.CTRLA = SLEEP_MODE_STANDBY;  
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7e0050>

    while (1)
    {
        sleep_mode();
 156:	e0 e5       	ldi	r30, 0x50	; 80
 158:	f0 e0       	ldi	r31, 0x00	; 0
        PORTC.OUTTGL = PIN6_bm;
 15a:	a0 e4       	ldi	r26, 0x40	; 64
 15c:	b4 e0       	ldi	r27, 0x04	; 4
 15e:	90 e4       	ldi	r25, 0x40	; 64

    SLPCTRL.CTRLA = SLEEP_MODE_STANDBY;  

    while (1)
    {
        sleep_mode();
 160:	80 81       	ld	r24, Z
 162:	81 60       	ori	r24, 0x01	; 1
 164:	80 83       	st	Z, r24
 166:	88 95       	sleep
 168:	80 81       	ld	r24, Z
 16a:	8e 7f       	andi	r24, 0xFE	; 254
 16c:	80 83       	st	Z, r24
        PORTC.OUTTGL = PIN6_bm;
 16e:	17 96       	adiw	r26, 0x07	; 7
 170:	9c 93       	st	X, r25
 172:	17 97       	sbiw	r26, 0x07	; 7
 174:	f5 cf       	rjmp	.-22     	; 0x160 <main+0x1c>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
